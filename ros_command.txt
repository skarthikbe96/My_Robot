ros2 launch my_robot rsp.launch.py

source install/setup.bash

rviz2

ros2 run joint_state_publisher_gui joint_state_publisher_gui

rviz2 -d src/my_robot/config/view_bot.rviz 

ros2 launch my_robot rsp.launch.py use_sim_time:=true

ros2 launch gazebo_ros gazebo.launch.py

ros2 run gazebo_ros spawn_entity.py -topic robot_description -entity bot_name

# robot_description is our topic which containts the rviz robot_description data

ros2 launch my_robot launch_sim.launch.py  

#all together

ros2 run teleop_twist_keyboard teleop_twist_keyboard

ros2 run teleop_twist_joy --teleop_node  joy -- joy_node

ros2 launch rplidar.launch.py


sudo apt install ros-humble-gazebo-ros-pkgs

ros2 launch gazebo_ros gazebo.launch.py


# plugins for image compressed

sudo apt install ros-humble-image-transport-plugins

#rvizs cannot handle image compressed

sudo apt install ros-humble-rqt-image-view

ros2 run rqt_image_view rqt_image_view


# compressed or uncompressed topic
ros2 run image_transport list_transports

Declared transports:
image_transport/compressed
image_transport/compressedDepth
image_transport/raw
image_transport/theora

ros2 run image_transport republish compressed raw --ros-args -r in/compressed:=/camera/image_raw/compressed -r out:=/camera/image_raw/uncompressed

ros2 launch my_robot launch_sim.launch.py world:=/home/karthik/Articulated_Robotics/my_robot/dev_ws/src/my_robot/worlds/obstacles.world


sudo killall -9 gazebo gzserver gzclient

# depth sensor
sudo apt install python3-rosdep
sudo rosdep init

ros2 launch depthai_examples rgb_publisher.launch.py
ros2 launch depthai_examples stereo.launch.py camera_model:=OAK-D-LITE


journalctl -fe

systemctl get-default

sudo systemctl set-default multi-user.target


ros2 control list_hardware_interfaces

ros2 run controller_manager ros2_contor_node

ros2 run controller_manager spawner diff_cont

ros2 run controller_manager spawner joint_broad

ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args -r /cmd_vel:=/diff_cont/cmd_vel_unstamped

/opt/ros/humble/share/slam_toolbox/config$ ls
mapper_params_lifelong.yaml      mapper_params_offline.yaml       mapper_params_online_sync.yaml
mapper_params_localization.yaml  mapper_params_online_async.yaml  slam_toolbox_default.rviz


# running the slam toolbox
ros2 launch slam_toolbox online_async_launch.py params_file:=/home/karthik/Articulated_Robotics/my_robot/dev_ws/src/my_robot/config/mapper_params_online_async.yaml use_sim_time:=true

ros2 service list

# saving the map 

Add new panel in rviz slamtoolboxplugin
when you saved the map we can reuse this for localization

rerun the slam toolbox

ros2 run nav2_map_server map_server --ros-args -p yaml_filename:=my_map_save.yaml -p use_sim_time:=true

ros2 run nav2_util lifecycle_bringup map_server

ros2 run nav2_amcl amcl --ros-args -p use_sim_time:=true

ros2 run nav2_util lifecycle_bringup amcl

ros publish the speed of the motor in /cmd_vel but we are using in /diff_cont/cmd_vel_unstamped

# launch nav2 launch nav2_bringup
ros2 launch nav2_bringup navigation_launch.py use_sim_time:=true
#add map in rviz2 topic is global_costmap/costmap

use 2d goal pose to mark the deatination

ros2 launch nav2_bringup localization_launch.py map:=/home/karthik/Articulated_Robotics/my_robot/dev_ws/new_map_save.yaml use_sim_time:=true

